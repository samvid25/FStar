>> Got issues: [
NegativeTests.False.fst(23,13-23,33): (Error 19) assertion failed; The SMT solver could not prove the query, try to spell your proof in more detail or increase fuel/ifuel
> In the top-level declaration for `let bar`
> In the top-level declaration for `[@@expect_failure] let bar`
> While checking module NegativeTests.False
  (see also prims.fst(383,54-383,66))
>>]
>> Got issues: [
NegativeTests.False.fst(30,18-30,35): (Error 12) Expected type "Prims.l_True \/ Prims.l_True"; but "Prims.Left (Prims.T)" has type "Prims.c_or (*?u1*) _ Prims.l_True"
> In the top-level declaration for `let absurd`
> In the top-level declaration for `[@@expect_failure] let absurd`
> While checking module NegativeTests.False
NegativeTests.False.fst(30,18-30,35): (Error 12) Expected type "Prims.l_True \/ Prims.l_True"; but "Prims.Left (Prims.T)" has type "Prims.c_or Prims.c_True Prims.l_True"
> In the top-level declaration for `let absurd`
> In the top-level declaration for `[@@expect_failure] let absurd`
> While checking module NegativeTests.False
NegativeTests.False.fst(30,36-30,54): (Error 12) Expected type "Prims.l_True \/ Prims.l_True"; but "Prims.Right (Prims.T)" has type "Prims.c_or Prims.l_True (*?u6*) _"
> In the top-level declaration for `let absurd`
> In the top-level declaration for `[@@expect_failure] let absurd`
> While checking module NegativeTests.False
NegativeTests.False.fst(30,36-30,54): (Error 12) Expected type "Prims.l_True \/ Prims.l_True"; but "Prims.Right (Prims.T)" has type "Prims.c_or Prims.l_True Prims.c_True"
> In the top-level declaration for `let absurd`
> In the top-level declaration for `[@@expect_failure] let absurd`
> While checking module NegativeTests.False
>>]
NegativeTests.False.fst(21,4-21,7): (Warning 240) Admitting NegativeTests.False.bar without a definition
NegativeTests.False.fst(28,4-28,10): (Warning 240) Admitting NegativeTests.False.absurd without a definition
Verified module: NegativeTests.False
All verification conditions discharged successfully
